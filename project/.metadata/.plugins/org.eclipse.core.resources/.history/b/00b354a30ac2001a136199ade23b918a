package mainpack;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class Main {

	private static int slots = 1;
	static Random rnd = new Random();
	
	public static void main(String[] args) {
		

		Enode enode = new Enode();
		int simulation_time = 10;
		
		
		final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
		
		    executorService.scheduleAtFixedRate(new Runnable() {
		    	int slot_id = 0;
		        @Override
		        public void run() {
		  		  if(slots >= simulation_time) {
					  executorService.shutdown();  
				  }
		  		//the number of the users that are trying to connect to the Enode
		  		int number_ue = rnd.nextInt(87) + 1;
		  		slot(number_ue,enode,slot_id);
		  		slot_id++;
		        }
		        
		    }, 0, 5, TimeUnit.SECONDS);


        //printArray(enode.ue_assigned);
        
       // printArray(enode.ue_unassigned);

	}
	
	
	
	private static void slot(int number_ue, Enode enode,int slot_id) {

        	System.out.println("----------------------New slot with id " + slot_id + "--------------------------");      	
        	System.out.println("Number of Ue trying to connect " + number_ue);   
        	
        	
    		//the UE list that want to connect to the Enode 
    		List<Ue> users = new ArrayList<>(); 
    		
    		//Create list of users
    		for (int i = 0; i < number_ue; i++) {
    			//create UE with random preamble selection (1-64)
    			users.add(new Ue(rnd.nextInt(63) + 1));
    		}
    		
    		//Here we "connect the UE" with the Enode 
    		// if another UE has already assigned to the Enode under the specific 
    		// preabmle , we put the UE to the list with the unassigned UE 
            for (Ue ue:users ) {
            	if(enode.ue_assigned[ue.preamble] == null) {
            		enode.ue_assigned[ue.preamble] = ue;
            	} else {
            		enode.ue_unassigned[ue.preamble] = ue;
            	}
            	
            }
            System.out.println("--------Assigned-----------");
            printArray(enode.ue_assigned);
            System.out.println("===========================");
            System.out.println("--------Unassigned---------");
            printArray(enode.ue_unassigned);
            enode.sendMessage2();
            enode.clearUe();
            
            System.out.println("-------------------------------------------------"); 
	}
	
	
	public static void printArray(Ue array[]) {
		System.out.println("id " + " --> " + " signature");
		 for (Ue ue:array ) {
			 if(ue != null) {
				 System.out.println(ue.getid() + " --> " + ue.getPreamble());
				
			 }
			 
		 }
	}

}
